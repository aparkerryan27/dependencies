set(DEPENDENCIES_IGNORE "${CMAKE_C_COMPILER}")


if (NOT ${DEPENDENCIES_FOLDER} EQUAL "")
    set(DEPENDENCIES_FOLDER "${DEPENDENCIES_FOLDER}" CACHE PATH "")
    message ("dependency folder parameter: ${DEPENDENCIES_FOLDER}")
else()
    set(DEPENDENCIES_FOLDER "${CMAKE_CURRENT_SOURCE_DIR}/cmake-dependencies" CACHE PATH "")
endif()

make_directory(${DEPENDENCIES_FOLDER})

if (NOT EXISTS ${DEPENDENCIES_FOLDER}/CMakeLists.txt)
    file(DOWNLOAD https://raw.githubusercontent.com/germanespinosa/dependencies/main/cmake-dependencies.cmake ${DEPENDENCIES_FOLDER}/CMakeLists.txt)
endif()

set(DEPENDENCIES_DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/dependencies-build")

make_directory(${DEPENDENCIES_DESTINATION})

set(DEPENDENCY_CMAKE "cmake '-DBUILD_AS_DEPENDENCY=TRUE' '-DDEPENDENCIES_FOLDER=${DEPENDENCIES_FOLDER}' --no-warn-unused-cli -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} '-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}' -Wno-dev -DCATCH_TESTS=DISABLED ${DEPENDENCIES_FOLDER}")

include_directories(${DEPENDENCIES_FOLDER})

set(ADDITIONAL_CLEAN_FILES "")
list(APPEND ADDITIONAL_CLEAN_FILES ${DEPENDENCIES_FOLDER})
set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "${ADDITIONAL_CLEAN_FILES}")

function (append_new file_path new_string)
    if (NOT EXISTS "${file_path}")
        file(APPEND "${file_path}" "${new_string}")
    else()
        file(READ "${file_path}" content)
        string(FIND "${content}" "${new_string}" is_found)
        if (${is_found} EQUAL -1)
            file(APPEND "${file_path}" "${new_string}")
        endif()
    endif()
endfunction()


macro (add_dependency_include_directory include_dir)
    include_directories(${include_dir})
    append_new(${CMAKE_CURRENT_BINARY_DIR}/dependency_includes.txt "${include_dir};")
endmacro()

macro (dependency_include)
    if ("${BUILD_AS_DEPENDENCY}" MATCHES "TRUE")
        foreach(dependency_include_DIR ${ARGN})
            if (NOT ${dependency_include_DIR} EQUAL "")
                get_filename_component(dependency_include_DIR_full_path "${dependency_include_DIR}" ABSOLUTE )
                add_dependency_include_directory("${dependency_include_DIR_full_path}")
            endif()
        endforeach()
    else()
        include_directories(${ARGN})
    endif()
endmacro()

macro (add_dependency_package package_name_and_dir)
    message(STATUS "Adding package ${package_name_and_dir} to dependency tree")
    string(REPLACE "|" ";" package_name_and_dir ${package_name_and_dir})
    list(GET package_name_and_dir 0 package_name)
    list(LENGTH package_name_and_dir has_dir)
    if (${has_dir} GREATER 1)
        list(GET package_name_and_dir 1 package_DIR)
        set(package_dependency_string "${package_name}|${package_DIR};")
        set(${package_name}_DIR ${package_DIR})
    else()
        set(package_dependency_string "${package_name};")
    endif()
    append_new(${CMAKE_CURRENT_BINARY_DIR}/dependencies_packages.txt "${package_dependency_string}")
    find_package (${package_name} REQUIRED)
endmacro()

macro (add_dependency_output_directory dependency_output_directory)
    message(STATUS "Adding folder ${dependency_output_directory} to dependency tree")
    append_new("${CMAKE_CURRENT_BINARY_DIR}/dependencies_outputs.txt" "${dependency_output_directory};")
    link_directories(${dependency_output_directory})
endmacro()

macro(install_dependency DEPENDENCY_REPOSITORY)
    message ("${ARGN}")
    cmake_parse_arguments(DEPENDENCY "AUTO_UPDATE;CONNECTED;NO_BUILD;VERBOSE;PUBLIC;PRIVATE" "BRANCH;TAG" "PACKAGES;CMAKE_OPTIONS;TARGETS" ${ARGN} )

    if("${DEPENDENCY_BRANCH}" STREQUAL "")
        set(DEPENDENCY_HAS_BRANCH FALSE)
    else()
        set(DEPENDENCY_HAS_BRANCH TRUE)
    endif()

    if("${DEPENDENCY_TAG}" STREQUAL "")
        set(DEPENDENCY_HAS_TAG FALSE)
    else()
        set(DEPENDENCY_HAS_TAG TRUE)
    endif()

    if (${DEPENDENCY_HAS_TAG} AND ${DEPENDENCY_HAS_BRANCH})
        message(FATAL_ERROR "BRANCH and TAG cannot be uses simultaneously" )
    endif()

    if (${DEPENDENCY_AUTO_UPDATE} AND NOT ${DEPENDENCY_CONNECTED})
        message(FATAL_ERROR "must use CONNECTED with AUTO_UPDATE" )
    endif()

    if (${DEPENDENCY_PRIVATE} AND ${DEPENDENCY_PUBLIC})
        message(FATAL_ERROR "PRIVATE and PUBLIC cannot be uses simultaneously" )
    endif()

    list(LENGTH DEPENDENCY_UNPARSED_ARGUMENTS DEPENDENCY_UNPARSED_ARGUMENTS_COUNT)
    list(LENGTH DEPENDENCY_PACKAGES DEPENDENCY_PACKAGES_COUNT)

    if (${DEPENDENCY_UNPARSED_ARGUMENTS_COUNT} GREATER 0)
        if (${DEPENDENCY_PACKAGES_COUNT} GREATER 0)
            message(FATAL_ERROR "PACKAGES option can only be used if no packages where specified previously" )
        else()
            set(DEPENDENCY_PACKAGES ${DEPENDENCY_UNPARSED_ARGUMENTS})
            set(DEPENDENCY_PACKAGES_COUNT ${DEPENDENCY_UNPARSED_ARGUMENTS_COUNT})
        endif()
    endif()

    if (${DEPENDENCY_PACKAGES_COUNT} GREATER 0)
        set(DEPENDENCY_HAS_PACKAGES TRUE)
    else()
        set(DEPENDENCY_HAS_PACKAGES FALSE)
    endif()

    if (${DEPENDENCY_TARGETS})
        set(DEPENDENCY_HAS_TARGETS TRUE)
    else()
        set(DEPENDENCY_HAS_TARGETS FALSE)
    endif()

    get_filename_component(DEPENDENCY_REPOSITORY_NAME ${DEPENDENCY_REPOSITORY} NAME)
    message("")
    message("Configuring dependency ${DEPENDENCY_REPOSITORY_NAME}")

    # SET DEPENDENCY FOLDER
    set(DEPENDENCY_FOLDER_NAME "${DEPENDENCY_REPOSITORY_NAME}")

    if (${DEPENDENCY_HAS_BRANCH})
        STRING(REGEX REPLACE "[^a-zA-Z0-9]" "_" DEPENDENCY_BRANCH_FOLDER ${DEPENDENCY_BRANCH})
        set(DEPENDENCY_FOLDER_NAME "${DEPENDENCY_FOLDER_NAME}_${DEPENDENCY_BRANCH_FOLDER}")
    endif()

    if (${DEPENDENCY_HAS_TAG})
        STRING(REGEX REPLACE "[^a-zA-Z0-9]" "_" DEPENDENCY_TAG_FOLDER ${DEPENDENCY_TAG})
        set(DEPENDENCY_FOLDER_NAME "${DEPENDENCY_FOLDER_NAME}_${DEPENDENCY_TAG_FOLDER}")
    endif()

    set(DEPENDENCY_FOLDER "${DEPENDENCIES_FOLDER}/${DEPENDENCY_FOLDER_NAME}")

    set(DEPENDENCY_DESTINATION "${DEPENDENCIES_DESTINATION}/${DEPENDENCY_FOLDER_NAME}")

    #if the dependency folder doesn't exists does the initial cloning of the repo / branch / tag

    set(DEPENDENCY_LOCK "${DEPENDENCIES_FOLDER}/${DEPENDENCY_REPOSITORY_NAME}.lock")

    if (${DEPENDENCY_VERBOSE})
        message("##############################################################################################")
        message("DEPENDENCY_REPOSITORY: ${DEPENDENCY_REPOSITORY}")
        message("DEPENDENCY_VERBOSE: ${DEPENDENCY_VERBOSE}")
        message("DEPENDENCY_AUTO_UPDATE: ${DEPENDENCY_AUTO_UPDATE}")
        message("DEPENDENCY_PRIVATE: ${DEPENDENCY_PRIVATE}")
        message("DEPENDENCY_PUBLIC: ${DEPENDENCY_PUBLIC}")
        message("DEPENDENCY_BRANCH: ${DEPENDENCY_BRANCH}")
        message("DEPENDENCY_HAS_BRANCH: ${DEPENDENCY_HAS_BRANCH}")
        message("DEPENDENCY_TAG: ${DEPENDENCY_TAG}")
        message("DEPENDENCY_HAS_TAG: ${DEPENDENCY_HAS_TAG}")
        message("DEPENDENCY_CONNECTED: ${DEPENDENCY_CONNECTED}")
        message("DEPENDENCY_NO_BUILD: ${DEPENDENCY_NO_BUILD}")
        message("DEPENDENCY_HAS_PACKAGES: ${DEPENDENCY_HAS_PACKAGES}")
        message("DEPENDENCY_UNPARSED_ARGUMENTS: ${DEPENDENCY_UNPARSED_ARGUMENTS}")
        message("DEPENDENCY_PACKAGES: ${DEPENDENCY_PACKAGES}")
        message("DEPENDENCY_CMAKE_OPTIONS: ${DEPENDENCY_CMAKE_OPTIONS}")
        message("DEPENDENCY_UNPARSED_ARGUMENTS: ${DEPENDENCY_UNPARSED_ARGUMENTS}")
        message("DEPENDENCY_HAS_TARGETS: ${DEPENDENCY_HAS_TARGETS}")
        message("DEPENDENCY_TARGETS: ${DEPENDENCY_TARGETS}")
        message("##############################################################################################")
        message("DEPENDENCIES_FOLDER: ${DEPENDENCIES_FOLDER}")
        message("DEPENDENCY_FOLDER_NAME: ${DEPENDENCY_FOLDER_NAME}")
        message("DEPENDENCY_FOLDER: ${DEPENDENCY_FOLDER}")
        message("DEPENDENCY_DESTINATION: ${DEPENDENCY_DESTINATION}")
        message("##############################################################################################")
    endif()


    #wait for any update from another build
    file(LOCK ${DEPENDENCY_LOCK})

    if (NOT EXISTS "${DEPENDENCY_FOLDER}")
        if (${DEPENDENCY_HAS_BRANCH} OR ${DEPENDENCY_HAS_TAG})
            if (${DEPENDENCY_VERBOSE})
                message("##############################################################################################")
                message("CLONING: ${DEPENDENCY_REPOSITORY} BRANCH ${DEPENDENCY_BRANCH}${DEPENDENCY_TAG} INTO ${DEPENDENCY_FOLDER}")
                message("##############################################################################################")
            endif()
            execute_process(COMMAND git clone --branch "${DEPENDENCY_BRANCH}${DEPENDENCY_TAG}" ${DEPENDENCY_REPOSITORY} ${DEPENDENCY_FOLDER}
                    WORKING_DIRECTORY ${DEPENDENCIES_FOLDER})
        else()
            if (${DEPENDENCY_VERBOSE})
                message("##############################################################################################")
                message("CLONING: ${DEPENDENCY_REPOSITORY} INTO ${DEPENDENCY_FOLDER}")
                message("##############################################################################################")
            endif()
            execute_process(COMMAND git clone ${DEPENDENCY_REPOSITORY} ${DEPENDENCY_FOLDER}
                    WORKING_DIRECTORY ${DEPENDENCIES_FOLDER})
        endif()
        if (NOT ${DEPENDENCY_CONNECTED})
            if (${DEPENDENCY_VERBOSE})
                message("##############################################################################################")
                message("REMOVING REPOSITORY LINK")
                message("##############################################################################################")
            endif()
            file(REMOVE_RECURSE ${DEPENDENCY_FOLDER}/.git)
            file(REMOVE ${DEPENDENCY_FOLDER}/.gitmodules)
        endif()
    else()
        if (${DEPENDENCY_VERBOSE})
            message("##############################################################################################")
            message("NOT CLONING")
            message("##############################################################################################")
        endif()
    endif()
    #pulls changes
    set(DEPENDENCY_BUILD_CACHE "${DEPENDENCY_DESTINATION}/dependency_build_cache.txt")

    if (${DEPENDENCY_VERBOSE})
        message("##############################################################################################")
        message("DEPENDENCY_BUILD_CACHE: ${DEPENDENCY_BUILD_CACHE}")
        message("##############################################################################################")
    endif()

    if (${DEPENDENCY_AUTO_UPDATE} AND ${DEPENDENCY_CONNECTED})
        if (${DEPENDENCY_VERBOSE})
            message("##############################################################################################")
            message("PULLING CHANGES")
            message("##############################################################################################")
        endif()
        execute_process(COMMAND git pull
                WORKING_DIRECTORY ${DEPENDENCY_FOLDER}
                OUTPUT_VARIABLE DEPENDENCY_PULL_OUTPUT
                ERROR_QUIET)

        if ( NOT "${DEPENDENCY_PULL_OUTPUT}" MATCHES "Already up to date.")
            if (${DEPENDENCY_VERBOSE})
                message("##############################################################################################")
                message("GIT PULL RESULT: UPDATES FOUND")
            endif()
            if (EXISTS "${DEPENDENCY_BUILD_CACHE}")
                message("INVALIDATING CACHE")
                file(REMOVE "${DEPENDENCY_BUILD_CACHE}")
            endif()
            if (${DEPENDENCY_VERBOSE})
                message("##############################################################################################")
            endif()
        endif()
    endif()

    file(LOCK ${DEPENDENCY_LOCK} RELEASE)
    file(REMOVE ${DEPENDENCY_LOCK})

    make_directory("${DEPENDENCY_DESTINATION}")

    if (${DEPENDENCY_VERBOSE})
        message("##############################################################################################")
        message("CREATING DESTINATION:${DEPENDENCY_DESTINATION}")
        message("##############################################################################################")
    endif()

    if (NOT ${DEPENDENCY_NO_BUILD})
        if (NOT EXISTS "${DEPENDENCY_BUILD_CACHE}")
            if (${DEPENDENCY_VERBOSE})
                message("##############################################################################################")
                message("RUNNING CMAKE: ${DEPENDENCY_CMAKE} '-DDEPENDENCY=${DEPENDENCY_FOLDER_NAME}'")
                message("WORKING_DIRECTORY: ${DEPENDENCY_DESTINATION}")
                message("##############################################################################################")
            endif()
            execute_process(COMMAND bash -c "${DEPENDENCY_CMAKE} '-DDEPENDENCY=${DEPENDENCY_FOLDER_NAME}'"
                    WORKING_DIRECTORY ${DEPENDENCY_DESTINATION}
                    RESULT_VARIABLE DEPENDENCY_CMAKE_RESULT )

            if (NOT ${DEPENDENCY_CMAKE_RESULT} EQUAL "0")
                message(FATAL_ERROR "failed to load dependency cmake file" )
            endif()
        endif()

        if (${DEPENDENCY_HAS_TARGETS})
            file(READ "${DEPENDENCY_DESTINATION}/dependency-targets.txt" DEPENDENCY_AVAILABLE_TARGETS)
            foreach(${DEPENDENCY_TARGET} "${DEPENDENCY_TARGETS}")
                if (${DEPENDENCY_TARGET} IN_LIST ${DEPENDENCY_AVAILABLE_TARGETS})
#                    add_library(${DEPENDENCY_TARGET} STATIC IMPORTED)
#                    set_property(TARGET ${DEPENDENCY_TARGET} PROPERTY
#                            IMPORTED_LOCATION "/path/to/libfoo.a")
                else()
                    message(FATAL_ERROR "dependency target '${DEPENDENCY_TARGET}' not found")
                endif()
            endforeach()
        endif()

        if (${DEPENDENCY_PUBLIC})
            if (EXISTS "${DEPENDENCY_DESTINATION}/${DEPENDENCY_FOLDER_NAME}/dependency_includes.txt")
                if (${DEPENDENCY_VERBOSE})
                    message("##############################################################################################")
                    message("ADDING DEPENDENCIES INCLUDES")
                    message("##############################################################################################")
                endif()
                file(READ "${DEPENDENCY_DESTINATION}/${DEPENDENCY_FOLDER_NAME}/dependency_includes.txt" DEPENDENCY_INCLUDES)
                foreach(DEPENDENCY_INCLUDES_DIR ${DEPENDENCY_INCLUDES})
                    if (NOT ${DEPENDENCY_INCLUDES_DIR} EQUAL "")
                        add_dependency_include_directory(${DEPENDENCY_INCLUDES_DIR})
                    endif()
                endforeach()
            endif()

            if (EXISTS "${DEPENDENCY_DESTINATION}/${DEPENDENCY_FOLDER_NAME}/dependencies_outputs.txt")
                if (${DEPENDENCY_VERBOSE})
                    message("##############################################################################################")
                    message("ADDING DEPENDENCIES OUTPUTS")
                    message("##############################################################################################")
                endif()
                file(READ "${DEPENDENCY_DESTINATION}/${DEPENDENCY_FOLDER_NAME}/dependencies_outputs.txt" DEPENDENCIES_OUTPUTS)
                foreach(DEPENDENCIES_OUTPUT_FOLDER ${DEPENDENCIES_OUTPUTS})
                    if (NOT ${DEPENDENCIES_OUTPUT_FOLDER} EQUAL "")
                        add_dependency_output_directory(${DEPENDENCIES_OUTPUT_FOLDER})
                    endif()
                endforeach()
            endif()

            if (EXISTS "${DEPENDENCY_DESTINATION}/${DEPENDENCY_FOLDER_NAME}/dependencies_packages.txt")
                if (${DEPENDENCY_VERBOSE})
                    message("##############################################################################################")
                    message("ADDING DEPENDENCIES PACKAGES")
                    message("##############################################################################################")
                endif()
                file(READ "${DEPENDENCY_DESTINATION}/${DEPENDENCY_FOLDER_NAME}/dependencies_packages.txt" DEPENDENCIES_PACKAGES)
                foreach(DEPENDENCIES_PACKAGE_DIR ${DEPENDENCIES_PACKAGES})
                    if (NOT ${DEPENDENCIES_PACKAGE_DIR} EQUAL "")
                        add_dependency_package(${DEPENDENCIES_PACKAGE_DIR})
                    endif()
                endforeach()
            endif()
        endif()

        if (NOT EXISTS "${DEPENDENCY_BUILD_CACHE}")
            if (${DEPENDENCY_VERBOSE})
                message("##############################################################################################")
                message("BUILDING")
                message("##############################################################################################")
            endif()
            execute_process(COMMAND make -j
                    WORKING_DIRECTORY ${DEPENDENCY_DESTINATION}/${DEPENDENCY_FOLDER_NAME}
                    RESULT_VARIABLE DEPENDENCY_MAKE_RESULT)
            if (NOT ${DEPENDENCY_MAKE_RESULT} EQUAL "0")
                message(FATAL_ERROR "failed to build dependency cmake file" )
            endif()
        endif()
    endif()
    if (${DEPENDENCY_VERBOSE})
        message("##############################################################################################")
        message("SETTING CACHE")
        message("##############################################################################################")
    endif()
    file(APPEND "${DEPENDENCY_BUILD_CACHE}" "ready")


    if (${DEPENDENCY_HAS_PACKAGES})
        if (${DEPENDENCY_VERBOSE})
            message("##############################################################################################")
            message("ADDING DEPENDENCY PACKAGES : ${DEPENDENCY_PACKAGES}")
        endif()
        foreach(DEPENDENCY_PACKAGE ${DEPENDENCY_PACKAGES})
            if (${DEPENDENCY_VERBOSE})
                message("PACKAGE ${DEPENDENCY_PACKAGE} from ${DEPENDENCY_DESTINATION}/${DEPENDENCY_FOLDER_NAME}")
            endif()
            add_dependency_package ("${DEPENDENCY_PACKAGE}|${DEPENDENCY_DESTINATION}/${DEPENDENCY_FOLDER_NAME}")
        endforeach()
        if (${DEPENDENCY_VERBOSE})
            message("##############################################################################################")
        endif()
    endif()

    if (${DEPENDENCY_VERBOSE})
        message("##############################################################################################")
        message("ADDING DEPENDENCY OUTPUT")
        message("##############################################################################################")
    endif()
    add_dependency_output_directory(${DEPENDENCY_DESTINATION})
endmacro()