#!/bin/bash

echo "Quick build utility 2.0 v1.0.2020"
echo "by German Espinosa (germanespinosa@gmail.com)"
echo ""

if [[ "$*1" == *"-h"*  ]]
then
  echo "Build utility for c++ projects and python libraries."
  echo "For c++ it creates output folder (cmake-build-release or cmake-build-debug), runs cmake configuration and launch make build."
  echo "For python libraries, it versions the library, compress the files into a zip that can be installed with the installation utility"
  echo ""
  echo "Usage:"
  echo "   build [-c] [-cd] [-d] [-t] [-v version]"
  echo ""
  echo "Parameters:"
  echo "  -c  : Clears previous build. Regenerates build folder (C++ only)"
  echo "  -cd : Clears previous build and dependencies (C++ only)"
  echo "  -d  : Builds in debug  (C++ only)"
  echo "  -t  : Run tests (C++ only)"
  echo "  -i  : Runs make install after build"
  echo "  -p  : Force python build when both types of project are present"
  echo "  -v  : Library version in format \"major.minor.build\" (int.int.int) (python only)"
  echo "  -u  : Uploads the new library to the current git repository"
  echo ""
  exit 0
fi

build=""
#check if it is a C++ build or a python build
if [ -f "CMakeLists.txt" ] && ! [[ "$*1" == *"-p"*  ]]
then
  build="C++"
  echo "C++ build initiated"
  # C++ build
  FOLDER="cmake-build-release"
  BUILDTYPE="Release"

  if [[ "$*1" == *"-d"*  ]]
  then
    FOLDER="cmake-build-debug"
    BUILDTYPE="Debug"
  fi

  TESTS="NO_TESTS"
  if [[ "$*1" == *"-t"*  ]]
  then
    TESTS=""
  fi

  if [ -d "$FOLER" ]
  then
    if [[ "$*1" == *"-c"*  ]]
    then
      rm $FOLDER -r
    fi
  fi
  if [ -d "dependencies" ]
  then
    if [[ "$*1" == *"-cd"*  ]]
    then
      rm dependencies -r -f
    fi
  fi
  mkdir $FOLDER -p

  cd $FOLDER
  export CATCH_TESTS="$TESTS"
  cmake .. -DCMAKE_BUILD_TYPE=$BUILDTYPE '-DCMAKE_CXX_COMPILER=/bin/g++-10'

  if [[ "$*1" == *"-i"*  ]]
  then
    make install
  else
    make -j
  fi
else
  # python build
  version=""
  for (( i=1; i<=$#; i++)); do
    j=$((i+1))
    if [[ "${!i}" == "-v" ]]
    then
      version="${!j}"
    fi
  done
  for dir in */     # list directories in the form "/tmp/dirname/"
  do
    dir=${dir%*/}      #_ remove the trailing "/"
    if [ -f "$dir/__init__.py" ]
    then
      build="PYTHON"
      echo "Python build initiated"
      echo "Building $dir $version"
      lib_file=$(python-module-build.py "$dir" $version)
      if [[ "$*1" == *"-i"*  ]]
      then
        echo "Installing $dir to user python environment"
        python-module-install.py "$lib_file"
      fi
      if [[ "$*1" == *"-u"*  ]]
      then
         echo "Pushing file to git repository"
         git add $lib_file 2> /dev/null
         git commit $lib_file -m -q "new $dir version: $libfile" 2> /dev/null
         git push $libfile 2> /dev/null
      fi
    fi
  done
fi

if [[ "$build" == "" ]]
then
  echo "No cmake project file (CMakeLists.txt) and no python library found"
  exit 1
fi

echo "all done!"
